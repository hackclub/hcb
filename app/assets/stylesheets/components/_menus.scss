.menu__toggle {
  cursor: pointer;
  position: relative;
  font-family: $font-family;

  &[aria-expanded='true'] {
    outline: none;

    &:not(.menu__toggle--arrowless):after {
      bottom: -15px;
      animation: menu-arrow 0.15s ease forwards;
      left: 50%;
      transform: translateX(-50%);
      border: solid transparent;
      content: '';
      position: absolute;
      pointer-events: none;
      z-index: 5;

      @media (max-width: 32em) {
        display: none;
      }
    }

    &:not(.menu__toggle--arrowless):after {
      border-bottom-color: lighten(map-get($palette, smoke), 1%);
      border-width: 10px;
    }
  }
}

@keyframes menu-arrow {
  from {
    bottom: -27px;
  }
  to {
    bottom: -15px;
  }
}

.menu__content {
  display: none;
  cursor: initial;
  min-width: 14rem;
  position: absolute;
  font-size: 0.875rem;
  top: 100%;
  background-color: map-get($palette, white);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-menu);
  overflow: auto;
  z-index: 301;
  margin-top: 10px;

  input[type='submit'].menu__action,
  button.menu__action {
    background: transparent;
    font-size: inherit;
    width: 100%;
    text-align: left;
    box-shadow: none;
    justify-content: start;
    transform: none;
    padding: 0.75rem 0.5rem;
    border: none;
  }

  // Because pseudo elements don't work with inputs
  input[type='submit'].menu__action:hover {
    @include gradient(info);
    border-radius: 6px;
  }

  .menu__toggle--arrowless &,
  .menu__toggle--arrowless + & {
    top: calc(100% + 5px);
  }

  @media (min-width: 32em) {
    width: 16rem;
    padding: 0.5rem;

    .heading .btn & {
      left: -75%;
    }

    .card & {
      right: 0;
    }
  }

  &:not(.menu__content--2) {
    @media (min-width: 32em) and (max-width: 64em) {
      top: auto;
      right: 0;
      bottom: 0;
    }

    @media screen and (max-width: 32em) {
      padding: 1rem 0.5rem 3rem;
      border-radius: var(--radius-lg) var(--radius-lg) 0 0;
      position: fixed;
      top: auto;
      bottom: 0;
      left: 0;
      right: 0;
      margin: 0;
      border: 0;
      font-size: 1rem;
      z-index: 999;

      @supports (padding: calc(env(safe-area-inset-bottom))) {
        padding-bottom: calc(2rem + env(safe-area-inset-bottom));
      }
    }
  }

  hr {
    border: 0;
    border-bottom: 0.5px solid map-get($palette, divider);
    margin: 0.5rem -0.5rem;
  }

  &.menu__content--left {
    left: 0;
  }

  input[type='text'] {
    font-size: inherit !important;
    padding: 0.25rem 0.5rem !important;
    min-height: 0;
    font-weight: 500;
    color: map-get($palette, black);

    &::placeholder {
      font-weight: 500;
    }

    &:not(:focus)::placeholder {
      opacity: 1;
      color: map-get($palette, black);
    }

    &:focus {
      background: $snow;
    }

    &:not(:focus) {
      cursor: pointer;
      border-color: transparent;
    }

    &:hover:not(:focus) {
      @include gradient(info);

      &::placeholder {
        color: $white;
      }
    }
  }
}

.menu__content > a,
.menu__action {
  display: flex;
  align-items: center;
  font-weight: 500;
  line-height: 1.5;
  padding: 0.75rem 0.5rem;
  gap: 0.5rem;
  height: 2rem;
  color: map-get($palette, black);
  position: relative;
  text-decoration: none;
  letter-spacing: 0;
  background-color: transparent;
  transition: 0.125s ease background-color;
  cursor: pointer;
  border-radius: var(--radius-sm);

  &.menu__action--active::after {
    content: 'âœ”';
    position: absolute;
    right: 0.5rem;
  }

  .muted {
    transition: color 125ms ease-in-out;
  }

  &:hover,
  &:focus {
    background-color: map-get($palette, selection);
  }

  svg {
    fill: map-get($palette, muted);
    width: 24px;
    height: 24px;
  }
}

.menu__content--compact > a,
.menu__content--compact .menu__action {
  padding: 0.25rem 0.5rem !important;
}

.menu__content--switcher > a,
.menu__content--switcher .menu__action {
  padding: 0.5rem !important;
}

.menu__divider {
  display: block;
  position: relative;
  height: 1px;
  background-color: $smoke;
  margin: 0.5rem -0.5rem;

  html[data-dark='true'] & {
    background-color: $slate;
  }

  &[data-label] {
    margin-top: 0.75rem;
    margin-bottom: 0.75rem;

    &::after {
      content: attr(data-label);
      color: $muted;
      background-color: $white;
      padding-left: 0.25rem;
      padding-right: 0.25rem;
      font-size: 0.8rem;
      position: absolute;
      translate: 0.5rem -50%;

      html[data-dark='true'] & {
        background-color: $darkless;
      }
    }
  }
}
