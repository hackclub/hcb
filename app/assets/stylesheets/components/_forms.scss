input[type='date'],
input[type='email'],
input[type='number'],
input[type='password'],
input[type='search'],
input[type='tel'],
input[type='text'],
input[type='url'],
.input,
select,
textarea {
  -webkit-appearance: none;
  background-color: map-get($palette, snow);
  border-radius: 6px;
  border: 1px solid map-get($palette, smoke);
  color: inherit;
  display: block;
  font-size: 1rem;
  min-height: 2.5rem;
  margin-left: 0;
  outline: 0;
  padding: 0.25rem 0.5rem;
  position: relative;
  transition: border 0.2s ease;
  width: 100%;
  max-width: 24rem;

  &:focus-within {
    border-color: map-get($palette, info);
  }

  &[readonly],
  &[disabled] {
    cursor: no-drop;
    color: map-get($palette, slate);
  }
}

.input-group {
  display: flex;
  gap: 0.2rem;
  align-items: center;
  padding-top: 0;
  padding-bottom: 0;

  & input {
    border: 0;
    padding-left: 0.25rem;
    max-width: none;
  }

  & svg {
    @extend .muted;
  }
}

select {
  min-height: 2.5rem;
  padding: 0.25rem 0.5rem;
}

input[type='file'] {
  color: inherit;
  display: block;
  font-size: 1rem;
  max-width: 100%;
}

input[type='number'] {
  -moz-appearance: textfield;
}

.field--fileupload {
  display: flex;
  gap: 0.5rem;
  align-items: center;

  .field--fileupload__label {
    white-space: nowrap;
    display: block;
    padding: 5px 0;

    display: block;
    padding: 0.25rem 1rem;
    cursor: pointer;
    border-radius: 6px;

    color: map-get($palette, info);
    border: 1px dashed map-get($palette, info);

    transition: transform 0.125s ease-in-out;
    font-size: 0.875rem;
    font-weight: 600;

    letter-spacing: 0;
    line-height: 1.5;

    &:hover {
      transform: scale(1.0625);
    }
  }

  .field--fileupload__field {
    &::file-selector-button {
      display: none;
    }

    color: $muted;
  }
}

.field--image-upload {
  label:not(.previewing) {
    outline-offset: -10px;
    outline: 3px dashed $muted;
  }

  label {
    background-color: $smoke;
    color: $muted;
    border-radius: 0.5rem;
    padding: 1rem;
    height: 7.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    text-align: center;
    background-size: contain;
    background-position: center;
    background-repeat: no-repeat;

    html[data-dark='true'] & {
      background-color: $slate;
    }
  }

  input[type='file'] {
    display: none;
  }
}

input[type='number']::-webkit-inner-spin-button,
input[type='number']::-webkit-outer-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

input[type='number'],
.input--narrow {
  max-width: 16rem !important;
}

input[type='search'] {
  padding-left: 1rem;
}

input[type='search']::-webkit-search-decoration {
  display: none;
}

.field_with_errors {
  label {
    font-weight: 500;
    color: map-get($palette, error);
  }

  input {
    border-color: map-get($palette, error);
  }
}

.field {
  margin-bottom: 1rem;
}

.field--money {
  display: flex;
  align-items: center;

  &:before {
    content: '$';
    font-weight: 600;
    color: map-get($palette, muted);
    display: inline-block;
    width: 1rem;
  }

  input {
    max-width: 15rem !important;
  }
}

input[type='checkbox'] {
  accent-color: map-get($palette, info);
}

.field--checkbox {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.field--checkbox--switch {
  position: relative;
  display: inline-block;
  width: 60px;
  height: 34px;

  & input {
    opacity: 0;
    width: 0;
    height: 0;
  }

  & .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    -webkit-transition: 0.4s;
    transition: 0.4s;
    border-radius: 34px;
    background-color: #e8e8e9;

    [data-dark='true'] & {
      background-color: #3f4245;
    }
  }

  & .slider:before {
    position: absolute;
    content: '';
    height: 28px;
    width: 28px;
    left: 3px;
    bottom: 3px;
    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.125);
    transition: 0.2s;
    border-radius: 999px;
    background-color: #fff;
  }

  & input:checked + .slider {
    background-color: $red;
  }

  & input:checked + .slider:before {
    -webkit-transform: translateX(26px);
    -ms-transform: translateX(26px);
    transform: translateX(26px);

    [data-dark='true'] & {
      background-color: #fff;
    }
  }

  &:active .slider:before {
    width: 34px;
  }

  &:active input:checked + .slider:before {
    transform: translateX(20px);
  }
}

.field--radiobox {
  display: flex;
  align-items: center;

  label {
    margin-right: 0.5rem;
  }
}

.actions {
  margin-top: 1.5rem;
}

label {
  display: block;
  color: map-get($palette, black);
  font-weight: 500;
}

$select: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="%238492a6" viewbox="0 0 32 32"><path d="M0 6 L32 6 L16 28 z"/></svg>');

select {
  background-image: #{$select};
  background-repeat: no-repeat;
  background-position: right 0.75rem center;
  background-size: 0.5rem;
}

// rails date(time) inputs
select[name$='i)]'] {
  width: 4.5rem;
  display: inline-block;
  .onboarding & {
    flex: 1;
    width: auto;
    &:first-child {
      flex: 2;
    }
  }
}

// rails month inputs should be wider
select[id$='_2i'] {
  width: 9.125rem; // magic number, makes form page_sm wide
}

fieldset,
legend {
  display: block;
  margin: 0;
  padding: 0;
  border: 0;
}

.field--options {
  display: grid;
  gap: 1rem;
  grid-template-columns: repeat(2, 1fr);
  width: 100%;
  max-width: 24rem;

  &.trio {
    grid-template-columns: repeat(3, 1fr);
    max-width: 36rem;
  }

  strong {
    margin-top: 0.25rem;
    margin-bottom: 0.25rem;
  }

  input,
  .field_with_errors:has(> input) {
    display: none;
  }

  label,
  .field_with_errors > label {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 1rem;
    border-radius: 0.75rem;
    text-align: center;
    line-height: 1.25;
    color: map-get($palette, info);
    background-color: rgba(map-get($palette, accent), 0.25);
  }

  input:disabled + label,
  .field_with_errors:has(> input:disabled) + .field_with_errors:has(> label) {
    opacity: 0.5;
    cursor: default;
  }

  input:checked + label,
  .field_with_errors:has(> input:checked)
    + .field_with_errors:has(> label)
    > label {
    box-shadow:
      0 0 0 1px white,
      0 0 0 3px map-get($palette, info);
  }
}

textarea.card {
  max-width: none;
  border: 0;
  transition: 0.2s ease box-shadow;

  &:focus {
    box-shadow:
      inset 0 0 0 1px map-get($palette, info),
      0 0 2px 0 rgba(0, 0, 0, 0.0625),
      0 4px 8px 0 rgba(0, 0, 0, 0.125);
  }
}

input.fit {
  max-width: 100% !important;
}

form.grid--split,
form section.grid--split {
  grid-template-columns: repeat(2, 1fr);
  grid-gap: 0.75rem !important;

  .field {
    grid-column: span 2;
    margin-bottom: 0;
  }
}

.grid__half {
  grid-column: span 1 !important;
}

// Inspired by https://dev.to/madsstoumann/using-a-single-input-for-one-time-code-352l

input:where([data-behavior='otp_input']) {
  --otp-digits: 6;
  --otp-ls: 2.3ch;
  --otp-gap: 1.25;

  /* private consts */
  --_otp-bgsz: calc(var(--otp-ls) + 1ch);
  --_otp-digit: 0;

  all: unset;
  background:
    linear-gradient(
      90deg,
      rgba(51, 142, 218, 0.125) calc(var(--otp-gap) * var(--otp-ls)),
      transparent 0
    ),
    linear-gradient(
      90deg,
      #252429 calc(var(--otp-gap) * var(--otp-ls)),
      transparent 0
    );

  background-position:
    calc(var(--_otp-digit) * var(--_otp-bgsz)) 0,
    0 0;
  background-repeat: no-repeat, repeat-x;
  background-size: var(--_otp-bgsz) 100%;

  caret-color: #ddcfcf;
  caret-shape: block;

  clip-path: inset(0% calc(var(--otp-ls) / 2) 0% 0%);

  font-family: ui-monospace, monospace;
  font-size: 2em !important;
  inline-size: calc(var(--otp-digits) * var(--_otp-bgsz));
  letter-spacing: var(--otp-ls);
  padding-block: 1ch;
  padding: 0.2em 0px !important;
  padding-inline-start: calc(
    ((var(--otp-ls) - 0.9ch) / 2) * var(--otp-gap)
  ) !important;

  border-radius: 0px !important;
  background-color: rgba(0, 0, 0, 0) !important;
  border: none !important;
  color: inherit !important;
}
